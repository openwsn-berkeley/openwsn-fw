import os

Import('env')

# create build environment
buildEnv = env.Clone()

# inherit environment from user (PATH, etc)
buildEnv['ENV'] = os.environ

# choose bsp. Normally this would be the same as the board name,
# however, there are cases where one might want to make separate build
# configuration for the same board.
buildEnv['BSP'] = buildEnv['board']

# include board/bsp-specific directories
buildEnv.Append(
   CPPPATH = [
      os.path.join('#','bsp','boards',buildEnv['board']),
   ]
)


MSPVERSION = "5438a"
if   buildEnv['toolchain']=='mspgcc':
   flags = []
   # Machine flags
   flags += ['-mmcu=msp430f{0}'.format(MSPVERSION)]
   #flags += ['-D__MSP430F{0}__'.format(MSPVERSION)]
   flags += ['-DGCC_MSP430X']
   flags += ['-mhwmult=f5series']   #Use Hardware Multiplier

   # Data Model (MSP430X)
   if env['datamodel'] == 'large':
         flags += ['-mlarge']
         flags += ['-mcode-region=upper']
         flags += ['-mcpu=msp430xv2']
         flags += ['-D__DATA_MODEL_LARGE__']
         buildEnv.Append(ASFLAGS = '-D__DATA_MODEL_LARGE__')
         buildEnv.Append(ASFLAGS = '-mlarge')
   else:
      #flags += ['-msmall']
      flags += ['-D__DATA_MODEL_SMALL__']
      buildEnv.Append(ASFLAGS = '-D__DATA_MODEL_SMALL__')
      

   buildEnv.Append(CCFLAGS   = ' '.join(flags))
   buildEnv.Append(LINKFLAGS = ' '.join(flags))



# Use hardware accelerated crypto engine by default 
if not env['cryptoengine']:
   buildEnv.Append(CPPDEFINES    = {'CRYPTO_ENGINE_SCONS': 'board_crypto_engine'})

Return('buildEnv')


