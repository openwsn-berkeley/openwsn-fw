import os
import sys
import datetime
import re
import platform
import sconsUtils

import distutils.sysconfig

Import('env')

# create build environment
buildEnv = env.Clone()

# inherit environment from user (PATH, etc)
buildEnv['ENV'] = os.environ

# choose bsp. Normally this would be the same as the board name,
# however, there are cases where one might want to make separate build
# configuration for the same board.
buildEnv['BSP'] = buildEnv['board']

# Define locations for Python headers and shared library. A cross-platform build
# requires environment variables for these locations.
isCrossBuild = False
if os.name!='nt':
    if platform.architecture()[0]=='64bit' and buildEnv['simhost']=='x86-linux':
        # Search for a well-known file in the include directory tree to avoid 
        # hard-coding the intervening directories, which may refer to the build host
        # or Python version. For example, on the author's system, the file is in the
        # 'i386-linux-gnu/python2.7' directory.
        isCrossBuild = True
        pathnames    = sconsUtils.findPattern('Python.h',
                                              '{0}/include'.format(buildEnv['simhostpy']))
        if pathnames:
            pathname = pathnames[0]
        else:
            raise SystemError("Can't find python header in 'include' directory below provided simhostpy")
        pythonInc    = os.path.dirname(pathname)
        pythonLib    = '{0}/lib'.format(buildEnv['simhostpy'])
        
    elif buildEnv['simhost'].endswith('-windows'):
        isCrossBuild = True
        pythonInc    = buildEnv['simhostpy']
        pythonLib    = buildEnv['simhostpy']
    
if not isCrossBuild:
    pythonInc = distutils.sysconfig.get_python_inc()
    pythonLib = distutils.sysconfig.PREFIX+"/lib"
    if not sys.platform.startswith('darwin'):
        pythonLib+="s"
    
# update C include path
buildEnv.Append(
    CPPPATH = [
        pythonInc,
        # inc
        os.path.join('#','build','python_gcc','inc'),
        # bsp
        os.path.join('#','build','python_gcc','bsp','boards'),
        os.path.join('#','build','python_gcc','bsp','boards','python'),
        # drivers
        os.path.join('#','build','python_gcc','drivers','common'),
        # kernel
        os.path.join('#','build','python_gcc','kernel'),
        # openstack
        os.path.join('#','build','python_gcc','openstack'),
        os.path.join('#','build','python_gcc','openstack','02.5-MPLS'),
        os.path.join('#','build','python_gcc','openstack','02a-MAClow'),
        os.path.join('#','build','python_gcc','openstack','02b-MAChigh'),
        os.path.join('#','build','python_gcc','openstack','03a-IPHC'),
        os.path.join('#','build','python_gcc','openstack','03b-IPv6'),
        os.path.join('#','build','python_gcc','openstack','04-TRAN'),
        os.path.join('#','build','python_gcc','openstack','cross-layers'),
        # openapps
        os.path.join('#','build','python_gcc','openapps'),
        os.path.join('#','build','python_gcc','openapps','c6t'),
        os.path.join('#','build','python_gcc','openapps','rrt'),
        os.path.join('#','build','python_gcc','openapps','cexample'),
        os.path.join('#','build','python_gcc','openapps','cinfo'),
        os.path.join('#','build','python_gcc','openapps','cleds'),
        os.path.join('#','build','python_gcc','openapps','cstorm'),
        os.path.join('#','build','python_gcc','openapps','cwellknown'),
        os.path.join('#','build','python_gcc','openapps','techo'),
        os.path.join('#','build','python_gcc','openapps','tohlone'),
        os.path.join('#','build','python_gcc','openapps','uecho'),
        os.path.join('#','build','python_gcc','openapps','uinject'),
    ]
)

# update library include path
buildEnv.Append(
    LIBPATH = [pythonLib],
)

#============================ objectify functions =============================

#===== ObjectifiedFilename

def ObjectifiedFilename(env,source):
    dir       = os.path.split(source)[0]
    file      = os.path.split(source)[1]
    filebase  = file.split('.')[0]
    fileext   = file.split('.')[1]
    return os.path.join(dir,'{0}_obj.{1}'.format(filebase,fileext))

buildEnv.AddMethod(ObjectifiedFilename, 'ObjectifiedFilename')

#===== Objectify

varsToChange = [
    #===== drivers
    'openserial_vars',
    'opentimers_vars',
    #===== core
    'scheduler_vars',
    'scheduler_dbg',
    'openqueue_vars',
    'random_vars',
    'idmanager_vars',
    #===== stack
    # 02a-MAClow
    'adaptive_sync_vars',
    'ieee154e_vars',
    'ieee154e_stats',
    'ieee154e_dbg',
    'ieee802154_security_vars',
    # 02b-MAChigh
    'sixtop_vars',
    'neighbors_vars',
    'schedule_vars',
    # 03a-IPHC
    # 03b-IPv6
    'icmpv6echo_vars',
    'icmpv6rpl_vars',
    'opencoap_vars',
    'tcp_vars',
    #===== applications
    #+++++ TCP
    #- debug
    'tcpinject_vars',
    #- common
    'ohlone_vars',
    #+++++ UDP
    #- debug
    #- common
    'udpstorm_vars',
    #+++++ CoAP
    #- debug
    #- common
    'r6t_vars',
    'rinfo_vars',
    'rrt_vars',
]

returnTypes = [
    'int',
    'void',
    'owerror_t',
    'uint8_t',
    'uint16_t',
    'uint32_t',
    'bool',
    'opentimer_id_t',
    'PORT_TIMER_WIDTH',
    'PORT_RADIOTIMER_WIDTH',
    'dagrank_t',
    'open_addr_t*',
    'slotOffset_t',
    'frameLength_t',
    'cellType_t',
    'channelOffset_t',
    'ipv6_header_iht',
    'OpenQueueEntry_t*',
    'kick_scheduler_t',
    'scheduleEntry_t*',
    'm_securityLevelDescriptor*',
    'm_deviceDescriptor*',
    'm_keyDescriptor*',
]

callbackFunctionsToChange = [
    #===== bsp
    # supply
    # board
    # bsp_timer
    'cb',
    # debugpins
    # eui64
    # leds
    # radio
    'startFrame_cb',
    'endFrame_cb',
    # radiotimer
    'overflow_cb',
    'compare_cb',
    # sctimer
    # uart
    'txCb',
    'rxCb',
    #===== drivers
    # openserial
    # opentimers
    'callback',
    #===== kernel
    # scheduler
    #===== openwsn
    # IEEE802154
    # IEEE802154E
    # topology
    # neighbors
    # schedule
    # otf
    # sixtop
    # iphc
    # openbridge
    # forwarding
    # icmpv6
    # icmpv6echo
    # icmpv6rpl
    # opencoap
    'callbackRx',
    'callbackSendDone',
    # opentcp
    # openudp
    # rsvp
    # layerdebug
    # ohlone
    # rex
    # rinfo
    # rrt
    # rleds
    # rreg
    # rwellknown
    # tcpecho
    # tcpinject
    # tcpprint
    # udpecho
    # udpinject
    # udplatency
    # udpprint
    # udprand
    # udpstorm
    # idmanager
    # openqueue
    # openrandom
    # packetfunctions
]

functionsToChange = [
    #===== bsp
    'mote_main',
    # supply
    'supply_init',
    'supply_on',
    'supply_off',
    # board
    'board_init',
    'board_sleep',
    'board_reset',
    # bsp_timer
    'bsp_timer_init',
    'bsp_timer_set_callback',
    'bsp_timer_reset',
    'bsp_timer_scheduleIn',
    'bsp_timer_cancel_schedule',
    'bsp_timer_get_currentValue',
    'bsp_timer_isr',
    # debugpins
    'debugpins_init',
    'debugpins_frame_toggle',
    'debugpins_frame_clr',
    'debugpins_frame_set',
    'debugpins_slot_toggle',
    'debugpins_slot_clr',
    'debugpins_slot_set',
    'debugpins_fsm_toggle',
    'debugpins_fsm_clr',
    'debugpins_fsm_set',
    'debugpins_task_toggle',
    'debugpins_task_clr',
    'debugpins_task_set',
    'debugpins_isr_toggle',
    'debugpins_isr_clr',
    'debugpins_isr_set',
    'debugpins_radio_toggle',
    'debugpins_radio_clr',
    'debugpins_radio_set',
    'debugpins_ka_clr',
    'debugpins_ka_set',
    'debugpins_syncPacket_clr',
    'debugpins_syncPacket_set',
    'debugpins_syncAck_clr',
    'debugpins_syncAck_set',
    'debugpins_debug_clr',
    'debugpins_debug_set',
    # eui64
    'eui64_get',
    # leds
    'leds_init',
    'leds_error_on',
    'leds_error_off',
    'leds_error_toggle',
    'leds_error_isOn',
    'leds_error_blink',
    'leds_radio_on',
    'leds_radio_off',
    'leds_radio_toggle',
    'leds_radio_isOn',
    'leds_sync_on',
    'leds_sync_off',
    'leds_sync_toggle',
    'leds_sync_isOn',
    'leds_debug_on',
    'leds_debug_off',
    'leds_debug_toggle',
    'leds_debug_isOn',
    'leds_all_on',
    'leds_all_off',
    'leds_all_toggle',
    'leds_circular_shift',
    'leds_increment',
    # radio
    'radio_init',
    'radio_setOverflowCb',
    'radio_setCompareCb',
    'radio_setStartFrameCb',
    'radio_setEndFrameCb',
    'radio_reset',
    'radio_startTimer',
    'radio_getTimerValue',
    'radio_setTimerPeriod',
    'radio_getTimerPeriod',
    'radio_setFrequency',
    'radio_rfOn',
    'radio_rfOff',
    'radio_loadPacket',
    'radio_txEnable',
    'radio_txNow',
    'radio_rxEnable',
    'radio_rxNow',
    'radio_getReceivedFrame',
    'radio_isr',
    'radio_intr_startOfFrame',
    'radio_intr_endOfFrame',
    # radiotimer
    'radiotimer_init',
    'radiotimer_setOverflowCb',
    'radiotimer_setCompareCb',
    'radiotimer_setStartFrameCb',
    'radiotimer_setEndFrameCb',
    'radiotimer_start',
    'radiotimer_getValue',
    'radiotimer_setPeriod',
    'radiotimer_getPeriod',
    'radiotimer_schedule',
    'radiotimer_cancel',
    'radiotimer_getCapturedTime',
    'radiotimer_isr',
    'radiotimer_intr_compare',
    'radiotimer_intr_overflow',
    # sctimer
    'sctimer_init',
    'sctimer_stop',
    'sctimer_schedule',
    'sctimer_getValue',
    'sctimer_setCb',
    'sctimer_clearISR',
    'sctimer_reset',
    # uart
    'uart_init',
    'uart_setCallbacks',
    'uart_enableInterrupts',
    'uart_disableInterrupts',
    'uart_clearRxInterrupts',
    'uart_clearTxInterrupts',
    'uart_writeByte',
    'uart_writeCircularBuffer_FASTSIM',
    'uart_writeBufferByLen_FASTSIM',
    'uart_readByte',
    'uart_tx_isr',
    'uart_rx_isr',
    #===== drivers
    # openserial
    'openserial_init',
    'openserial_printStatus',
    'openserial_printInfoErrorCritical',
    'openserial_printData',
    'openserial_printPacket',
    'openserial_printInfo',
    'openserial_printError',
    'openserial_printCritical',
    'openserial_board_reset_cb',
    'openserial_getNumDataBytes',
    'openserial_getInputBuffer',
    'openserial_startInput',
    'openserial_startOutput',
    'openserial_stop',
    'openserial_goldenImageCommands',
    'debugPrint_outBufferIndexes',
    'openserial_echo',
    'outputHdlcOpen',
    'outputHdlcWrite',
    'outputHdlcClose',
    'inputHdlcOpen',
    'inputHdlcWrite',
    'inputHdlcClose',
    'isr_openserial_tx',
    'isr_openserial_rx',
    # opentimers
    'opentimers_init',
    'opentimers_start',
    'opentimers_setPeriod',
    'opentimers_stop',
    'opentimers_restart',
    'opentimers_timer_callback',
    'opentimers_sleepTimeCompesation',
    #===== kernel
    # scheduler
    'scheduler_init',
    'scheduler_start',
    'scheduler_push_task',
    #===== openstack
    'openstack_init',
    # adaptive_sync
    'adaptive_sync_init',
    'adaptive_sync_indicateTimeCorrection',
    'adaptive_sync_calculateCompensatedSlots',
    'adaptive_sync_countCompensationTimeout',
    'adaptive_sync_countCompensationTimeout_compoundSlots',
    'adaptive_sync_driftChanged',
    # IEEE802154_security
    'IEEE802154_security_init',
    'IEEE802154_security_prependAuxiliarySecurityHeader',
    'IEEE802154_security_outgoingFrameSecurity',
    'IEEE802154_security_retrieveAuxiliarySecurityHeader',
    'IEEE802154_security_incomingFrame',
    'IEEE802154_security_securityLevelDescriptorLookup',
    'IEEE802154_security_deviceDescriptorLookup',
    'IEEE802154_security_keyDescriptorLookup',
    # IEEE802154
    'ieee802154_prependHeader',
    'ieee802154_retrieveHeader',
    # IEEE802154E
    'ieee154e_init',
    'ieee154e_asnDiff',
    'isr_ieee154e_newSlot',
    'isr_ieee154e_timer',
    'ieee154e_startOfFrame',
    'ieee154e_endOfFrame',
    'debugPrint_asn',
    'debugPrint_isSync',
    'debugPrint_macStats',
    'activity_synchronize_newSlot',
    'activity_synchronize_startOfFrame',
    'activity_synchronize_endOfFrame',
    'activity_ti1ORri1',
    'activity_ti2',
    'activity_tie1',
    'activity_ti3',
    'activity_tie2',
    'activity_ti4',
    'activity_tie3',
    'activity_ti5',
    'activity_ti6',
    'activity_tie4',
    'activity_ti7',
    'activity_tie5',
    'activity_ti8',
    'activity_tie6',
    'activity_ti9',
    'activity_ri2',
    'activity_rie1',
    'activity_ri3',
    'activity_rie2',
    'activity_ri4',
    'activity_rie3',
    'activity_ri5',
    'activity_ri6',
    'activity_rie4',
    'activity_ri7',
    'activity_rie5',
    'activity_ri8',
    'activity_rie6',
    'activity_ri9',
    'ieee154e_processIEs',
    'ieee154e_getTimeCorrection',
    'isValidRxFrame',
    'isValidAck',
    'isValidJoin',
    'incrementAsnOffset',
    'ieee154e_getAsn',
    'asnWriteToSerial',
    'ieee154e_syncSlotOffset',
    'asnStoreFromEB',
    'joinPriorityStoreFromEB',
    'timeslotTemplateIDStoreFromEB',
    'channelhoppingTemplateIDStoreFromEB',
    'synchronizePacket',
    'synchronizeAck',
    'changeIsSync',
    'notif_sendDone',
    'notif_receive',
    'resetStats',
    'updateStats',
    'calculateFrequency',
    'changeState',
    'endSlot',
    'ieee154e_isSynch',
    'ieee154e_sendEB',
    'ieee154e_setIsAckEnabled',
    'ieee154e_setSingleChannel',
    'ieee154e_setIsSecurityEnabled',
    # topology
    'topology_isAcceptablePacket',
    # neighbors
    'neighbors_init',
    'neighbors_getMyDAGrank',
    'neighbors_getNumNeighbors',
    'neighbors_getPreferredParentEui64',
    'neighbors_getKANeighbor',
    'neighbors_isStableNeighbor',
    'neighbors_isPreferredParent',
    'neighbors_isNeighborWithLowerDAGrank',
    'neighbors_isNeighborWithHigherDAGrank',
    'neighbors_indicateRx',
    'neighbors_indicateTx',
    'neighbors_indicateRxDIO',
    'neighbors_getNeighbor',
    'neighbors_updateMyDAGrankAndNeighborPreference',
    'neighbors_removeOld',
    'debugPrint_neighbors',
    'registerNewNeighbor',
    'isNeighbor',
    'removeNeighbor',
    'isThisRowMatching',
    'neighbors_setMyDAGrank',
    # processIE
    'processIE_prependMLMEIE',
    'processIE_prependSyncIE',
    'processIE_prependSlotframeLinkIE',
    'processIE_prependTSCHTimeslotIE',
    'processIE_prependChannelHoppingIE',
    'processIE_prependOpcodeIE',
    'processIE_prependBandwidthIE',
    'processIE_prependScheduleIE',
    'processIE_retrieveSlotframeLinkIE',
    'processIE_retrieveOpcodeIE',
    'processIE_retrieveBandwidthIE',
    'processIE_retrieveScheduleIE',
    # schedule
    'schedule_init',
    'schedule_startDAGroot',
    'debugPrint_schedule',
    'debugPrint_backoff',
    'schedule_setFrameLength',
    'schedule_setFrameHandle',
    'schedule_setFrameNumber',
    'schedule_getSlotInfo',
    'schedule_addActiveSlot',
    'schedule_getMaxActiveSlots',
    'schedule_removeActiveSlot',
    'schedule_isSlotOffsetAvailable',
    'schedule_statistic_poorLinkQuality',
    'schedule_syncSlotOffset',
    'schedule_advanceSlot',
    'schedule_getNextActiveSlotOffset',
    'schedule_getClosestActiveSlotOffset',
    'schedule_getFrameLength',
    'schedule_getFrameHandle',
    'schedule_getFrameNumber',
    'schedule_getType',
    'schedule_getNeighbor',
    'schedule_getChannelOffset',
    'schedule_getOkToSend',
    'schedule_resetBackoff',
    'schedule_indicateRx',
    'schedule_indicateTx',
    'schedule_resetEntry',
    # ord
    'otf_init',
    'otf_notif_addedCell',
    'otf_notif_removedCell',
    'otf_addCell_task',
    'otf_removeCell_task',
    # sixtop
    'sixtop_init',
    'sixtop_setKaPeriod',
    'sixtop_setEBPeriod',
    'sixtop_setHandler',
    'sixtop_addCells',
    'sixtop_removeCell',
    'sixtop_removeCellByInfo',
    'sixtop_maintaining',
    'sixtop_send',
    'task_sixtopNotifSendDone',
    'task_sixtopNotifReceive',
    'debugPrint_myDAGrank',
    'debugPrint_kaPeriod',
    'sixtop_send_internal',
    'sixtop_maintenance_timer_cb',
    'sixtop_timeout_timer_cb',
    'timer_sixtop_management_fired',
    'sixtop_sendEB',
    'sixtop_sendKA',
    'timer_sixtop_six2six_timeout_fired',
    'sixtop_six2six_sendDone',
    'sixtop_processIEs',
    'sixtop_notifyReceiveCommand',
    'sixtop_notifyReceiveLinkRequest',
    'sixtop_linkResponse',
    'sixtop_notifyReceiveLinkResponse',
    'sixtop_notifyReceiveRemoveLinkRequest',
    'sixtop_candidateAddCellList',
    'sixtop_candidateRemoveCellList',
    'sixtop_addCellsByState',
    'sixtop_removeCellsByState',
    'sixtop_areAvailableCellsToBeScheduled',
    # iphc
    'iphc_init',
    'iphc_sendFromForwarding',
    'iphc_sendFromBridge',
    'iphc_sendDone',
    'iphc_receive',
    'iphc_prependIPv6Header',
    'iphc_retrieveIPv6Header',
    'iphc_retrieveIphcHeader',
    'iphc_prependIPv6HopByHopHeader',
    'iphc_retrieveIPv6HopByHopHeader',
    # openbridge
    'openbridge_init',
    'openbridge_triggerData',
    'openbridge_sendDone',
    'openbridge_receive',
    # forwarding
    'forwarding_init',
    'forwarding_send',
    'forwarding_sendDone',
    'forwarding_receive',
    'forwarding_getNextHop',
    'forwarding_send_internal_RoutingTable',
    'forwarding_send_internal_SourceRouting',
    'forwarding_createRplOption',
    'forwarding_createFlowLabel',
    # icmpv6
    'icmpv6_init',
    'icmpv6_send',
    'icmpv6_sendDone',
    'icmpv6_receive',
    # icmpv6echo
    'icmpv6echo_init',
    'icmpv6echo_trigger',
    'icmpv6echo_sendDone',
    'icmpv6echo_receive',
    # icmpv6rpl
    'icmpv6rpl_init',
    'icmpv6rpl_sendDone',
    'icmpv6rpl_receive',
    'icmpv6rpl_timer_DIO_cb',
    'icmpv6rpl_timer_DIO_task',
    'sendDIO',
    'icmpv6rpl_timer_DAO_cb',
    'icmpv6rpl_timer_DAO_task',
    'sendDAO',
    'icmpv6rpl_getRPLIntanceID',
    'icmpv6rpl_writeDODAGid',
    'icmpv6rpl_setDIOPeriod',
    'icmpv6rpl_setDAOPeriod',
    # opencoap
    'opencoap_init',
    'opencoap_receive',
    'opencoap_sendDone',
    'timers_coap_fired',
    'opencoap_writeLinks',
    'opencoap_register',
    'opencoap_send',
    'icmpv6coap_timer_cb',
    # opentcp
    'opentcp_init',
    'opentcp_connect',
    'opentcp_send',
    'opentcp_sendDone',
    'opentcp_receive',
    'opentcp_close',
    'opentcp_debugPrint',
    'timers_tcp_fired',
    'prependTCPHeader',
    'containsControlBits',
    'opentcp_reset',
    'tcp_change_state',
    'opentcp_timer_cb',
    # openudp
    'openudp_init',
    'openudp_send',
    'openudp_sendDone',
    'openudp_receive',
    'openudp_debugPrint',
    # rsvp
    'rsvp_qos_request',
    'rsvp_timer_cb',
    # idmanager
    'idmanager_init',
    'idmanager_getIsDAGroot',
    'idmanager_setIsDAGroot',
    'idmanager_getIsBridge',
    'idmanager_setIsBridge',
    'idmanager_getMyID',
    'idmanager_setMyID',
    'idmanager_isMyAddress',
    'idmanager_triggerAboutRoot',
    'idmanager_triggerAboutBridge',
    'debugPrint_id',
    # openqueue
    'openqueue_init',
    'debugPrint_queue',
    'openqueue_getFreePacketBuffer',
    'openqueue_freePacketBuffer',
    'openqueue_removeAllCreatedBy',
    'openqueue_removeAllOwnedBy',
    'openqueue_sixtopGetSentPacket',
    'openqueue_sixtopGetReceivedPacket',
    'openqueue_macGetDataPacket',
    'openqueue_macGetEBPacket',
    'openqueue_reset_entry',
    # openrandom
    'openrandom_init',
    'openrandom_get16b',
    # packetfunctions
    'packetfunctions_ip128bToMac64b',
    'packetfunctions_mac64bToIp128b',
    'packetfunctions_mac64bToMac16b',
    'packetfunctions_mac16bToMac64b',
    'packetfunctions_isBroadcastMulticast',
    'packetfunctions_isAllRoutersMulticast',
    'packetfunctions_isAllHostsMulticast',
    'packetfunctions_sameAddress',
    'packetfunctions_readAddress',
    'packetfunctions_writeAddress',
    'packetfunctions_reserveHeaderSize',
    'packetfunctions_tossHeader',
    'packetfunctions_reserveFooterSize',
    'packetfunctions_tossFooter',
    'packetfunctions_calculateCRC',
    'packetfunctions_checkCRC',
    'packetfunctions_calculateChecksum',
    'onesComplementSum',
    'packetfunctions_htons',
    'packetfunctions_ntohs',
    'packetfunctions_htonl',
    #===== openapps
    'openapps_init',
    # c6t
    'c6t_init',
    'c6t_receive',
    'c6t_sendDone',
    # cexample
    'cexample_init',
    'cexample_receive',
    'cexample_timer_cb',
    'cexample_task_cb',
    'cexample_sendDone',
    # cinfo
    'cinfo_init',
    'cinfo_receive',
    'cinfo_sendDone',
    # cleds
    'cleds__init',
    'cleds_receive',
    'cleds_sendDone',
    # cstorm
    'cstorm_init',
    'cstorm_receive',
    'cstorm_timer_cb',
    'cstorm_task_cb',
    'cstorm_sendDone',
    # cwellknown
    'cwellknown_init',
    'cwellknown_receive',
    'cwellknown_sendDone',
    # techo
    'techo_init',
    'techo_shouldIlisten',
    'techo_receive',
    'techo_sendDone',
    'techo_connectDone',
    'techo_debugPrint',
    # tohlone
    'tohlone_init',
    'tohlone_shouldIlisten',
    'tohlone_sendpkt',
    'tohlone_check4chars',
    'tohlone_receive',
    'tohlone_sendDone',
    'tohlone_connectDone',
    'tohlone_debugPrint',
    # uecho
    'uecho_init',
    'uecho_receive',
    'uecho_sendDone',
    'uecho_debugPrint',
    # uinject
    'uinject_init',
    'uinject_sendDone',
    'uinject_receive',
    'uinject_timer_cb',
    'uinject_task_cb',
    # rrt
    'rrt_init',
    'rrt_receive',
    'rrt_sendDone',
    'rrt_setGETRespMsg',
    'rrt_sendCoAPMsg',
]

headerFiles = [
    #=== inc
    'opendefs',
    #=== libbsp
    'board',
    'bsp_timer',
    'debugpins',
    'eui64',
    'leds',
    'radio',
    'radiotimer',
    'uart',
    #=== libdrivers,
    'openhdlc',
    'openserial',
    'opentimers',
    #=== libkernel
    'scheduler',
    #=== libopenstack
    'openstack',
    # 02a-MAClow
    'adaptive_sync',
    'topology',
    'IEEE802154',
    'IEEE802154E',
    'IEEE802154_security',
    'IEEE802154_dummy_security',
    'ieee802154_security_driver',
    # 02b-MAChigh
    'neighbors',
    'processIE',
    'schedule',
    'sixtop',
    'otf',
    # 02.5-MPLS
    # TODO
    # 03a-IPHC
    'iphc',
    'openbridge',
    # 03b-IPv6
    'forwarding',
    'icmpv6',
    'icmpv6echo',
    'icmpv6rpl',
    # 04-TRAN
    'opencoap',
    'opentcp',
    'openudp',
    'rsvp',
    # cross-layers
    'idmanager',
    'openqueue',
    'openrandom',
    'packetfunctions',
    #=== openapps
    'openapps',
    'c6t',
    'cexample',
    'cinfo',
    'cleds',
    'cstorm',
    'cwellknown',
    'techo',
    'tohlone',
    'uecho',
    'uinject',
    'rrt',
]

def objectify(env,target,source):
    
    assert len(target)==1
    assert len(source)==1
    
    target = target[0].abspath
    source = source[0].abspath
    
    basefilename = os.path.split(source)[1].split('.')[0]
    
    if os.path.split(source)[1].split('.')[1]=='h':
        headerFile = True
    else:
        headerFile = False
    
    output  = []
    output += ['objectify:']
    output += ['- target : {0}'.format(target)]
    output += ['- source : {0}'.format(source)]
    output  = '\n'.join(output)
    #print output
    
    #========== read
    
    f = open(source,'r')
    lines = f.read()
    f.close()
    
    #========= modify
    
    #=== all files
    
    # add banner
    banner    = []
    banner   += ['/**']
    banner   += ['DO NOT EDIT DIRECTLY!!']
    banner   += ['']
    banner   += ['This file was \'objectified\' by SCons as a pre-processing']
    banner   += ['step for the building a Python extension module.']
    banner   += ['']
    banner   += ['This was done on {0}.'.format(datetime.datetime.now())]
    banner   += ['*/']
    banner   += ['']
    banner    = '\n'.join(banner)
    
    lines     = banner+lines
    
    # update the included headers
    for v in headerFiles+[basefilename]:
        lines = re.sub(
            r'\b{0}.h\b'.format(v),
            r'{0}_obj.h'.format(v),
            lines
        )
    
    # change callback function declaration signatures
    def replaceCallbackFunctionDeclarations(matchObj):
        function        = matchObj.group(1)
        args            = matchObj.group(2)
        
        if args and "void" not in args:
            return '{0}(OpenMote* self, {1})'.format(function, args)
        else:
            return '{0}(OpenMote* self)'.format(function)
    
    lines = re.sub(
        pattern         = r'(typedef[ \S]+_cbt\))\((.*?)\)',
        repl            = replaceCallbackFunctionDeclarations,
        string          = lines,
        flags           = re.DOTALL,
    )
    
    # comment out global variables declarations 
    if not headerFile:
        for v in varsToChange:
            lines  = re.sub(
                '{0}_t\s+{0}\s*;'.format(v),
                '// declaration of global variable _{0}_ removed during objectification.'.format(v),
                lines
            )
    
    # change global variables by self->* counterpart
    if basefilename!='openwsnmodule':
        for v in varsToChange:
            lines = re.sub(
                r'\b{0}\b'.format(v),
                r'(self->{0})'.format(v),
                lines
            )
    
    # change function signatures
    def replaceFunctions(matchObj):
        returnType      = matchObj.group(1)
        function        = matchObj.group(2)
        args            = matchObj.group(3)
        
        if returnType in returnTypes:
            if args and "void" not in args:
                return '{0} {1}(OpenMote* self, {2})'.format(returnType,function, args)
            else:
                return '{0} {1}(OpenMote* self)'.format(returnType,function)
        else:
            if args and "void" not in args:
                return '{0} {1}(self, {2})'.format(returnType,function, args)
            else:
                return '{0} {1}(self)'.format(returnType,function, args)
    
    if basefilename!='openwsnmodule':
        for v in functionsToChange:
            lines = re.sub(
                pattern     = r'([\w\*]*)[ \t]*({0})[ \t]*\((.*?)\)'.format(v),
                repl        = replaceFunctions,
                string      = lines,
                flags       = re.DOTALL,
            )
    
    #=== .h files only

    if headerFile:
        # include Python.h first
        lines = re.sub(
            r'(#include [<"]\w+\.h[>"])',
            r'#include "Python.h"\n\n\1',
            lines,
            count=1
        )
        
        # include openwsn module header file
        lines = re.sub(
            r'(//[=]+ prototypes [=]+)',
            r'#include "openwsnmodule_obj.h"\ntypedef struct OpenMote OpenMote;\n\n\1',
            lines,
        )
    
    #=== .c files only
    
    if not headerFile:
        
        # change function signatures
        def replaceCallbackFunctionCalls(matchObj):
            operator        = matchObj.group(1)
            function        = matchObj.group(2)
            args            = matchObj.group(3)
            
            if args:
                return '{0}{1}(self, {2})'.format(operator,function, args)
            else:
                return '{0}{1}(self)'.format(operator,function)
        
        for v in callbackFunctionsToChange:
            lines = re.sub(
                pattern     = '(\.|->)({0})\((.*?)\)'.format(v),
                repl        = replaceCallbackFunctionCalls,
                string      = lines,
            )
        
        # modify Python module name
        assert len(BUILD_TARGETS)==1
        if basefilename=='openwsnmodule':
            lines = re.sub(
                'REPLACE_BY_PROJ_NAME',
                BUILD_TARGETS[0],
                lines
            )
    
    #========== write
    
    f = open(target,'w')
    f.write(''.join(lines))
    f.close()

if env['verbose']:
    objectifyBuilder = Builder(
        action = Action(objectify)
    )
else:
    objectifyBuilder = Builder(
        action = Action(objectify,'Objectifying       $SOURCE -> $TARGET.file')
    )

buildEnv.Append(BUILDERS = {'Objectify' : objectifyBuilder})

Return('buildEnv')
